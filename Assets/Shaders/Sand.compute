#pragma kernel Init
#pragma kernel Next
#pragma kernel ApplyBuffer

#include "Random.cginc"

float _Resolution;
RWTexture2D<float4> _Result;
sampler2D _GridBuffer;

float4 GetUV(uint3 id)
{
    return float4(id.xy / _Resolution, 0, 0);
}

float SampleNeighbour(float4 position, float dx, float dy)
{
    return tex2Dlod(_GridBuffer, position + float4(dx, dy, 0, 0)).x;
}

void ApplyBuffer(uint2 uv)
{
    float4 pos = float4(uv / _Resolution, 0, 0);
    float4 buffer = tex2Dlod(_GridBuffer, pos);
    _Result[uv] = buffer;
}

bool CanFall(uint3 id)
{
    int y = id.y;
    
    while (y >= 0)
    {
        float4 uv = GetUV(uint3(id.x, y, id.y));
        float state = tex2Dlod(_GridBuffer, uv).r;

        if (state == 0)
            return true;
        
        y--;
    }
    
    return false;
}

[numthreads(8,8,1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    float halfResolution = _Resolution * 0.5;
    int3 sid = id; // Use signed ID to avoid console warnings.
    int state = sid.x == halfResolution && (sid.y == halfResolution || sid.y == halfResolution * 0.5) ? 1 : 0;
    
    _Result[id.xy] = float4(state.xxx, 1);
}

[numthreads(8,8,1)]
void Next(uint3 id : SV_DispatchThreadID)
{
    float4 uv = GetUV(id);
    float delta = 1.0 / _Resolution; // Cells neighbour distance.
    float upState = SampleNeighbour(uv, 0, delta).r;
    float state = tex2Dlod(_GridBuffer, uv).r;

    if (state == 0)
    {
        if (upState == 1)
            state = 1;
    }
    else if (state == 1)
    {
        if (CanFall(id))
            state = 0;
    }
    
    _Result[id.xy] = float4(state.xxx, 1);
}

[numthreads(8,8,1)]
void ApplyBuffer(uint3 id : SV_DispatchThreadID)
{
    ApplyBuffer(id.xy);
}